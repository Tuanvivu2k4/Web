@model PagedList.IPagedList<SaleOnline.Models.Product>
@using PagedList.Mvc
@using SaleOnline.Models

@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<div class="row mb-3">
    <div class="col-md-10 mx-auto d-flex justify-content-center gap-2">
        <input type="text" class="form-control" id="searchName" placeholder="Tìm theo tên sản phẩm" value="@ViewBag.CurrentSearch" style="max-width: 250px;" />
        <select id="categoryFilter" class="form-control" style="max-width: 200px;">
            <option value="">-- Danh mục --</option>
            @foreach (var c in ViewBag.Categories as List<Category>)
            {
                <option value="@c.Id" @(ViewBag.CurrentCategory == c.Id ? "selected" : "")>@c.Name</option>
            }
        </select>
        <select id="statusFilter" class="form-control" style="max-width: 150px;">
            <option value="">-- Trạng thái --</option>
            <option value="Active" @(ViewBag.CurrentStatus == "Active" ? "selected" : "")>Active</option>
            <option value="Inactive" @(ViewBag.CurrentStatus == "Inactive" ? "selected" : "")>Inactive</option>
        </select>
        <button class="btn btn-primary" id="btnSearch"><i class="fa fa-search"></i> Tìm</button>
    </div>
</div>

<div class="d-flex justify-content-between mb-3 align-items-center">
    <!-- Bên trái: Export + Import -->
    <div class="d-flex gap-2 align-items-center">
        <div class="dropdown">
            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                <i class="fa fa-download"></i> Export
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="@Url.Action("Export", "Products", new { area = "Admin", format = "xlsx" })">Export to Excel (.xlsx)</a></li>
                <li><a class="dropdown-item" href="@Url.Action("Export", "Products", new { area = "Admin", format = "csv" })">Export to CSV (.csv)</a></li>
                <li><a class="dropdown-item" href="@Url.Action("Export", "Products", new { area = "Admin", format = "txt" })">Export to Text (.txt)</a></li>
            </ul>
        </div>

        <form action="@Url.Action("Import", "Products", new { area = "Admin" })" method="post" enctype="multipart/form-data" class="d-inline-block">
            <div class="input-group">
                <input type="file" name="importFile" class="form-control" accept=".xlsx,.csv,.txt" required />
                <button type="submit" class="btn btn-success">
                    <i class="fa fa-upload"></i> Import
                </button>
            </div>
        </form>
    </div>

    <!-- Bên phải: Xoá + Thêm -->
    <div class="d-flex gap-2">
        <button class="btn btn-danger" id="btnDeleteSelected"><i class="fa fa-trash"></i> Xoá</button>
        <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addProductModal">
            <i class="fa fa-plus"></i> Thêm sản phẩm
        </button>
    </div>
</div>

<table class="table table-bordered table-hover">
    <thead>
        <tr>
            <th><input type="checkbox" id="checkAll" /></th>
            <th>Ảnh</th>
            <th>Tên sản phẩm</th>
            <th>Ngày sản xuất</th>
            <th>Mô tả</th>
            <th>Số lượng đã bán</th>
            <th>Danh mục</th>
            <th>Trạng thái</th>
            <th>Thao tác</th>
        </tr>
    </thead>
    <tbody id="productTableContainer">
        @Html.Partial("_ProductTablePartial", Model)
    </tbody>
</table>

<div class="d-flex justify-content-center">
    @Html.PagedListPager(Model, page => Url.Action("Index", new
    {
        page,
        search = ViewBag.CurrentSearch,
        categoryId = ViewBag.CurrentCategory,
        status = ViewBag.CurrentStatus
    }), new PagedListRenderOptions
    {
        DisplayLinkToFirstPage = PagedListDisplayMode.Always,
        DisplayLinkToLastPage = PagedListDisplayMode.Always,
        DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
        DisplayLinkToNextPage = PagedListDisplayMode.Always,
        MaximumPageNumbersToDisplay = 5,
        DisplayEllipsesWhenNotShowingAllPageNumbers = true,
        UlElementClasses = new[] { "pagination", "justify-content-center" }
    })
</div>

@Html.Partial("_AddProductPartial", new CreateProductViewModel())

<div class="modal fade" id="viewProductModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Chi tiết sản phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="viewProductContent">
                <!-- Nội dung sẽ được load bằng Ajax -->
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editProductModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Chỉnh sửa sản phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="editProductModalBody">
                <!-- Nội dung Ajax load -->
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $(document).on("click", "#btnSearch", function () {
                const name = $('#searchName').val();
                const categoryId = $('#categoryFilter').val();
                const status = $('#statusFilter').val();

                const query = `?search=${name}&categoryId=${categoryId}&status=${status}`;
                window.location.href = '@Url.Action("Index", "Products", new { area = "Admin" })' + query;
            });
            // Khi tích checkbox dòng
            $(document).on('change', '.checkItem', function () {
                const allChecked = $('.checkItem').length === $('.checkItem:checked').length;
                $('#checkAll').prop('checked', allChecked);
            });

            // Khi tích/bỏ checkbox "Chọn tất cả"
            $(document).on('change', '#checkAll', function () {
                $('.checkItem').prop('checked', $(this).is(':checked'));
            });
            $(document).on("submit", "#createProductForm", function (e) {
                e.preventDefault();

                const form = this;
                const formData = new FormData(form);

                $.ajax({
                    url: form.action,
                    type: "POST",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function () {
                        $("#addProductModal").modal("hide");
                        $.get('@Url.Action("GetProductTable", "Products")', function (html) {
                            $("#productTableContainer").html(html);
                        });
                        alert("Thêm sản phẩm thành công.");
                    },
                    error: function (xhr) {
                        $("#addProductModalBody").html(xhr.responseText);
                    }
                });
            });
            $(document).on("click", ".btn-view-product", function () {
                const id = $(this).data("id");
                $.get('@Url.Action("DetailPartial", "Products")', { id: id }, function (html) {
                    $("#viewProductContent").html(html);
                    $("#viewProductModal").modal("show");
                });
            });
            $(document).on('click', '.btn-edit-product', function () {
                const id = $(this).data('id');
                $.get('@Url.Action("EditPartial", "Products")', { id: id }, function (html) {
                    $('#editProductModalBody').html(html);
                    $('#editProductModal').modal('show');
                });
            });

            // Gửi form sửa
            $(document).on('submit', '#editProductForm', function (e) {
                e.preventDefault();

                const form = this;
                const formData = new FormData(form);

                $.ajax({
                    url: form.action,
                    type: "POST",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function () {
                        $('#editProductModal').modal('hide');
                        $.get('@Url.Action("GetProductTable", "Products")', {
                            search: $('#searchName').val(),
                            categoryId: $('#categoryFilter').val(),
                            status: $('#statusFilter').val()
                        }, function (html) {
                            $('#productTableContainer').html(html);
                            $('#checkAll').prop('checked', false);
                        });
                        alert("Cập nhật sản phẩm thành công.");
                    },
                    error: function (xhr) {
                        $('#editProductModalBody').html(xhr.responseText);
                    }
                });
            });

            // Thêm dòng option mới
            $(document).on('click', '#btnAddOptionEdit', function () {
                const index = $('#editProductForm .option-row').length;
                const template = $('#editOptionTemplate').html().replace(/__index__/g, index);
                $('#editOptionContainer').append(template);
                reindexOptionRows();
            });

            // Xoá dòng option
            $(document).on('click', '.btn-remove-option-edit', function () {
                $(this).closest('.option-row').remove();
                reindexOptionRows();
            });
            function reindexOptionRows() {
                $('#editProductForm .option-row').each(function (index) {
                    $(this).attr('data-index', index);

                    $(this).find('input, select').each(function () {
                        const name = $(this).attr('name');
                        if (name) {
                            const newName = name.replace(/\Options\[\d+\]/, 'Options[' + index + ']');
                            $(this).attr('name', newName);
                        }

                        const id = $(this).attr('id');
                        if (id) {
                            const newId = id.replace(/\Options_\d+__/, 'Options_' + index + '__');
                            $(this).attr('id', newId);
                        }
                    });
                });
            }
            $(document).on('click', '.btn-delete-product', function () {
                const id = $(this).data('id');

                if (!confirm("Bạn có chắc muốn xoá sản phẩm này (bao gồm các biến thể và tuỳ chọn)?")) return;

                $.ajax({
                    url: '@Url.Action("DeleteProduct", "Products")',
                    type: 'POST',
                    data: { id: id },
                    success: function (res) {
                        if (res.success) {
                            $.get('@Url.Action("GetProductTable", "Products")', {
                                search: $('#searchName').val(),
                                categoryId: $('#categoryFilter').val(),
                                status: $('#statusFilter').val()
                            }, function (html) {
                                $('#productTableContainer').html(html);
                                $('#checkAll').prop('checked', false);
                            });
                            alert("Đã xoá thành công.");
                        }
                    },
                    error: function () {
                        alert("Đã xảy ra lỗi khi xoá.");
                    }
                });
            });
            $(document).on('click', '#btnDeleteSelected', function () {
                let ids = [];

                $('.checkItem:checked').each(function () {
                    const id = $(this).data('id');
                    if (id) ids.push(id);
                });

                if (ids.length === 0) {
                    alert("Bạn chưa chọn sản phẩm nào.");
                    return;
                }

                if (!confirm("Bạn có chắc muốn xoá các sản phẩm đã chọn (bao gồm cả biến thể và tuỳ chọn)?")) return;

                $.ajax({
                    url: '@Url.Action("DeleteSelectedProducts", "Products")',
                    type: 'POST',
                    traditional: true,
                    data: { ids: ids },
                    success: function (res) {
                        if (res.success) {
                            $.get('@Url.Action("GetProductTable", "Products")', function (html) {
                                $('#productTableContainer').html(html);
                                $('#checkAll').prop('checked', false);
                                alert("Đã xoá thành công.");
                            });
                        }
                    },
                    error: function () {
                        alert("Đã xảy ra lỗi khi xoá.");
                    }
                });
            });
        });
    </script>
}